//#Область ПодключаемыйМодуль_НачалоПримера

Перем ТиповойМодульДиадока;
Перем ОсновнойМодуль Экспорт;


//**************************************
//{ СЕРВИСНЫЕ ФУНКЦИИ

// Обеспечивает контроль совместимости подключаемого модуля и основного	
Функция ЭДО_ВерсияAPIПодключаемогоМодуля() Экспорт
	Возврат 1;
КонецФункции

Функция НовыйКонтент(ИмяКонтента)
	//для отладки/разработки
	Возврат ОсновнойМодуль.ДД_Компонента_ПолучитьПустойКонтент(ИмяКонтента,Истина);
КонецФункции

// прослойка для отладки: перехватывает исключение при установке значения неподходящего типа в реквизит.
Процедура УстановитьЗначениеXDTO(Элемент,ИмяРеквизита,ЗначениеРеквизита,ЭтоСсылка = Ложь)

	Если ЗначениеРеквизита=Неопределено
		Или ЗначениеРеквизита=NULL Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		//здесь можно добавить проверки на заполненность, вывод сообщений и т.д.
		
		Если ЭтоСсылка Тогда
			Элемент[ИмяРеквизита] = ЗначениеВСтрокуВнутр(ЗначениеРеквизита);
		Иначе	
			Элемент[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
		
		//Элемент.Установить(ИмяРеквизита,ЗначениеРеквизита);
		
	Исключение
		Сообщить("Исключение при заполнении реквизита """+ИмяРеквизита+""":
		|"+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Может пригодиться при отладке в режиме управляемых форм, когда точки остановки в открытом модуле не срабатывают.
// Достаточно вставить вызов данной процедуры в нужном месте и включить остановку по ошибке.
Процедура ПриглашениеОтладки()
	
	Попытка
		ВызватьИсключение "catch me if you can";
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗначений(ТЗ, Значение0=Неопределено, Значение1=Неопределено, Значение2=Неопределено)
	
	СтрокаТЗ = ТЗ.Добавить();
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[0] = Значение0;
	КонецЕсли;
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[1] = Значение1;
	КонецЕсли;
	
	Если Значение2 <> Неопределено Тогда
		СтрокаТЗ[2] = Значение2;
	КонецЕсли;
		
КонецПроцедуры

//} СЕРВИСНЫЕ ФУНКЦИИ


//**************************************
//{ ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ

// Возвращает инициализированный объект типового модуля диадока
Функция ТиповойМодульДиадока()
	
	мРежимОтладки = Ложь;
	
	Если ТиповойМодульДиадока=неопределено Тогда
		
		Попытка
			// вдруг модуль уже был подключен. А мы не можем у менеджера внешних обработок спросить, какие обработки подключены.
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
		Исключение
			
			Если мРежимОтладки Тогда
				//возьмем файл с диска
				
				ИмяФайлаСМодулем = "c:\temp\Diadoc1C_UF_5_11_07_exports.epf";
				ДД = Новый ДвоичныеДанные(ИмяФайлаСМодулем);
				
			Иначе
				
				//развернем файл из макета
				ДД = ПолучитьМакет("ТиповойМодульДиадок_epf");
				
			КонецЕсли;
			
			АдресВХ = ПоместитьВоВременноеХранилище(ДД);
			ТиповойМодульДиадока = ВнешниеОбработки.Подключить(АдресВХ,"ТиповойМодульДиадока",Ложь);
			УдалитьИзВременногоХранилища(АдресВХ);
			
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
			
		КонецПопытки;
		
//		ТиповойМодульДиадока.ИнициализироватьМодуль(); // это в ОФ
		ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока); // а так будет в УФ
	КонецЕсли;
	
	Возврат ТиповойМодульДиадока;
	
КонецФункции

Процедура ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока)
	
	// с этим минимумом он уже взлетает
	ТиповойМодульДиадока.ПараметрыКлиентСервер = Новый Структура;
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации" , Метаданные.Версия);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера",	Ложь);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяОбработки",			"___");
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль",	Новый Структура("ИспользоватьМодуль",Ложь));
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВременноеХранилище",	Новый Структура);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшаСервераНаВремяСеанса",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресНеСуществующиеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключенныеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	
	ТиповойМодульДиадока.ЗаполнитьМанифест(ТиповойМодульДиадока,"Платформа");
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("МаркерКонфигурации",	ТиповойМодульДиадока.МетодСервера(,"ПолучитьМаркерКонфигурации"));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции",	ТиповойМодульДиадока.МетодСервера(,"ИмяФормыИнтеграции"));
	
КонецПроцедуры

// Трансформация Структуры, выданной типовым модулем Диадока, в XDTO
// Может, стоит затащить это в типовой модуль?
Процедура ЗаполнитьКонтентXDTOПоСтруктуре(Контент,Структура)
	
	Для Каждого Эл Из Структура Цикл
		
		Если ТипЗнч(Эл.Значение)=Тип("Структура") Тогда
			
			Если Эл.Ключ = "ЕдиницаИзмеренияСсылка"
				Или Эл.Ключ = "СсылкаНаЕИ" Тогда
				УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение.Ссылка, Истина);
				Продолжить;
			КонецЕсли;
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				ЗаполнитьКонтентXDTOПоСтруктуре(Контент[Эл.Ключ],Эл.Значение)
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Эл.Значение)=Тип("Массив")
			Или ТипЗнч(Эл.Значение)=Тип("ТаблицаЗначений") Тогда
			
			ТипСтроки = Контент.Свойства().Получить(Эл.Ключ).Тип.Имя;
			
			Если ТипЗнч(Эл.Значение) = Тип("ТаблицаЗначений") Тогда
				_Массив = ОсновнойМодуль.ТаблицаЗначений_2_МассивСтруктур(Эл.Значение);
			Иначе
				_Массив = Эл.Значение;
			КонецЕсли;
			
			Для Каждого ЭлементМассива Из _Массив Цикл
				
				НовЭлемент = Контент[Эл.Ключ].Добавить(НовыйКонтент(ТипСтроки));
				ЗаполнитьКонтентXDTOПоСтруктуре(НовЭлемент,ЭлементМассива)
			
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Эл.Значение) Тогда
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				
				Если Эл.Ключ = "Price" Тогда
					
					Попытка
						Контент.Price = Эл.Значение;
					Исключение
						Контент.Price = Число(Эл.Значение);
					КонецПопытки;
					
				Иначе
					
					УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение, ЭтоИмяСвойстваСсылки(Эл.Ключ));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ЭтоИмяСвойстваСсылки(Имя)
	Возврат (
			Имя = "ВалютаСсылка" Или
			Имя = "СтранаПроисхожденияСсылка" Или
			Имя = "ЕдиницаИзмеренияСсылка" Или
			Имя = "Ссылка" Или
			Имя = "СсылкаНаЕИ"
	);
КонецФункции
                                 
//} ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ


//**************************************
//{		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
&Насервере
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		"Диадок (СКБ Контур): Подключаемый модуль");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			"1.0");
	ПараметрыРегистрации.Вставить("Информация", 		"Модуль работы с электронными первичными документами через Диадок (подключаемая часть)");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&Насервере
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

&Насервере
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда=						ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление=			Представление;
	НоваяКоманда.Идентификатор=			Идентификатор;
	НоваяКоманда.Использование=			Использование;
	НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
	НоваяКоманда.Модификатор=			Модификатор;
	
КонецПроцедуры

//}		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ


//**************************************
//{ СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ

// Обработка всех событий подключаемого модуля
Функция ОбработатьСобытие(ИмяСобытия,Параметры) Экспорт
	
	Если ИмяСобытия = "ПослеПодготовкиПакета" Тогда
		
		//ПослеПодготовкиПакета(Параметры.Пакет);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПодготовитьЭлектронныйДокумент" Тогда
		
		ПодготовитьЭлектронныйДокумент(Параметры.Результат,Параметры.ВидДокументаРазвернутый,Параметры.ДополнительныеПараметры);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВидаПакета(Параметры.ВидПакетаРазвернутый); // для построения списка пакетов на отправку
		
	ИначеЕсли ИмяСобытия = "ПодготовитьПакет" Тогда
		
		ПодготовитьПакет(Параметры.ВидПакетаРазвернутый, Параметры.СтрокаСписка, Параметры.Пакет); // для подготовки единичного пакета
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхПакетов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхПакетов();
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхВидовДокументов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхВидовДокументов();
		
	КонецЕсли;
	
КонецФункции

// Тут можно переопределить отправителя/получателя/подразделения/заблокированность/тестовость
// Но можно закинуть и в код подготовки пакета.
Процедура ПослеПодготовкиПакета(Пакет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения <> """"
	|			ТОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения
	|		ИНАЧЕ Диадок_ЮрФизЛица.ID
	|	КОНЕЦ КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1"   //это можно и в коробку попробовать
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.OrganizationId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Контрагент);
	Пакет.ДанныеДД.CounteragentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//1. FromDepartmentId - по Организации
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1
	|	И Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияОрганизаций"""
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.FromDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//2. ToDepartmentId - по Договору
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК спрДоговорыКонтрагентов
	|		ПО (спрДоговорыКонтрагентов.Ссылка = &ТекущийДоговор)
	|			И Диадок_ЮрФизЛица.СвязанныйСправочник2 = спрДоговорыКонтрагентов.Родитель
	|			И (Диадок_ЮрФизЛица.СвязанныйСправочник2 ССЫЛКА Справочник.ДоговорыКонтрагентов)
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияКонтрагентов"")"
	);
	Запрос.УстановитьПараметр("ТекущийДоговор",Пакет.Данные1С.Документ.ДоговорКонтрагента);
	Пакет.ДанныеДД.ToDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
//	Пакет.ДанныеДД.DelaySend = Истина; //отладка
	
КонецПроцедуры

// Основная точка входа для подготовки исходящего документа
Функция ПодготовитьЭлектронныйДокумент(Результат, ВидДокументаРазвернутый, ДополнительныеПараметры)

	Документ1С					= Результат.Документ1С;
	ВидДокументаНаименование	= ВидДокументаРазвернутый.Наименование;
	ТипКонтента					= ВидДокументаРазвернутый.ТипКонтента;
	
	Если ВидДокументаРазвернутый.ID = "ID_УПД_СЧФ" Тогда
		
		Если ТипЗнч(Документ1С) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ВызватьИсключение "Документ для формирования пакета отличается от документа ""Счет-фактура выданный""";
		КонецЕсли;
		
		Допсведения = Неопределено;
		ФИОПодписанта = " ";
		Заполнить_UtdSellerContent(Результат.Content, Новый Структура("ДокументСсылка, Function", Документ1С, "Invoice"));
		
		Возврат Истина;
		
	ИначеЕсли ВРЕГ(ТипКонтента)=ВРЕГ("Torg12SellerContent") Тогда
		
		Допсведения = Неопределено;
		ФИОПодписанта = " ";
		
		XmlTorg12Content= ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlTorg12Content", Документ1С, Неопределено, Неопределено, ДопСведения, ФИОПодписанта);
		
		//ОтвЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Документ1С.Организация,Документ1С.Дата);
		//ЗаполнитьПодпись(XmlTorg12Content.SupplyAllowedBy,ОтвЛица.РуководительФИО,ОтвЛица.РуководительДолжностьПредставление);
		
		//СписокОшибок=	  ТиповойМодульДиадока().МетодСервера(,"ВалидацияXmlTorg12Content", XmlTorg12Content);
		//Если ЗначениеЗаполнено(СписокОшибок) Тогда
		//	ВызватьИсключение(СписокОшибок);
		//КонецЕсли; 
		
		ЗаполнитьКонтентXDTOПоСтруктуре(Результат.Content,XmlTorg12Content);
		
	ИначеЕсли ВРЕГ(ТипКонтента)=ВРЕГ("InvoiceContent") Тогда
		
		Если НЕ ТипЗнч(Документ1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ВызватьИсключение "Неизвестный тип счета-фактуры";
		КонецЕсли;
		
		Допсведения = Неопределено;
		ФИОПодписанта = " ";
		InvoiceContent=	ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
		СписокОшибок= 	ТиповойМодульДиадока().МетодСервера(,"ВалидацияInvoiceContent", InvoiceContent, Документ1С);
		Если ЗначениеЗаполнено(СписокОшибок) тогда
			ВызватьИсключение(СписокОшибок)
		КонецЕсли;	 
		
		ЗаполнитьКонтентXDTOПоСтруктуре(Результат.Content,InvoiceContent);
		
		Возврат Истина;
			
	ИначеЕсли ВРЕГ(ТипКонтента)=ВРЕГ("NonformilizedContent") Тогда
		
		Если ВидДокументаНаименование = "Рассылка_PDF" Тогда
			
			ПолныйПутьКФайлу = Документ1С.ТекущаяВерсияТом.ПолныйПутьWindows + Документ1С.ТекущаяВерсия.ПутьКФайлу;
			Результат.ДвоичныеДанные			= Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			Результат.ИмяФайла					= Документ1С.Наименование;
			
			Возврат Истина;
			
		ИначеЕсли ВидДокументаНаименование = "Транзакционный отчет" Тогда
			
			CcылканаВПФ = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ВидДокументаНаименование); // предполагаем, что он именно так и будет называться
			// Но вообще это лучше уже прямо ссылкой задавать.
			// Ссылку выпустим в следующих релизах.
			
			ИмяВремФайла = "";
			ПредставлениеФайла = "";
			СформироватьВнешнююПечатнуюФорму(Документ1С,CcылканаВПФ,Неопределено,ИмяВремФайла,ПредставлениеФайла);
			
			Результат.ДвоичныеДанные			= Новый ДвоичныеДанные(ИмяВремФайла);
			Результат.ИмяФайла					= ПредставлениеФайла;
			
			УдалитьФайлы(ИмяВремФайла);
			
			Возврат Истина;
			
		ИначеЕсли ВидДокументаНаименование = "АктСверки" Тогда
			
			ФИОПодписанта = " ";
			СтруктураАктаСверки = ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуАктаСверки", Документ1С, Неопределено, ФИОПодписанта);
			
			ПолныйПутьКФайлу = СтруктураАктаСверки.ИмяВременногоФайла;
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			Результат.Content.Date						= Документ1С.Дата;
			Результат.Content.Number					= Документ1С.Номер;
			Результат.Content.NeedRecipientSignature	= Ложь;
			Результат.ДвоичныеДанные					= ДвоичныеДанные;
			Результат.ИмяФайла							= СтруктураАктаСверки.ИмяФайла;
			
			Возврат Истина;
			
		Иначе
			
			ВызватьИсключение "Неизвестный тип документа: "+ВидДокументаНаименование;
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение "Неизвестный тип документа: "+ВидДокументаНаименование;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПодпись(КонтентПодписи, ФИО, Должность)
	
	КонтентПодписи.FirstName	= ФИО.Имя;
	КонтентПодписи.SurName		= ФИО.Фамилия;
	КонтентПодписи.Patronymic	= ФИО.Отчество;
	
	КонтентПодписи.JobTitle		= Должность;
	
КонецПроцедуры

// Шаблонная функция для вывода внешней печатной формы.
// Если все ок, возвращает Истина
// Результат сохраняется в параметрах ИмяВремФайла и ПредставлениеФайла. Первые 3 параметра - входные.
Функция СформироватьВнешнююПечатнуюФорму(Документ,	ВнешняяПечатнаяФорма, ДопПараметры=Неопределено, ИмяВремФайла, ПредставлениеФайла)
	
	РезультатПечати = Неопределено;
			
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Документ);
	ПараметрыВывода = Неопределено;
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды,ОбъектыНазначения","ТранзакционныйОтчет",ОбъектыНазначения);
	ОбъектыПечати = Новый СписокЗначений;
	
	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	
	МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФорма,
		ПараметрыИсточника, РезультатПечати, ОбъектыПечати, ПараметрыВывода);
		
	Если НЕ ТипЗнч(РезультатПечати)=Тип("ТаблицаЗначений")
		Или РезультатПечати.Количество()<>1 Тогда
		ВызватьИсключение "Не удалось сформировать печатную форму """ + ВнешняяПечатнаяФорма + """ объекта " + Документ;
	КонецЕсли;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	РезультатПечати[0].ТабличныйДокумент.Записать(ИмяВремФайла,ТипФайлаТабличногоДокумента.PDF);
	
	ПредставлениеФайла = РезультатПечати[0].СинонимМакета + " № " + Документ.Номер + " от " + Формат(Документ.Дата,"ДФ=dd.MM.yyyy") + ".pdf";
			
	Возврат Истина; // все ок
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВидаПакета(ВидПакетаРазвернутый)
	
	Если НЕ ВидПакетаРазвернутый.Свойство("ID") Тогда
		Сообщить("Отсутствует ID для пакета: " + ВидПакетаРазвернутый.Наименование);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидПакетаРазвернутый.ID = "ID_ОсновнойПакет" Тогда
		
		Возврат 
		"ВЫБРАТЬ
		|	Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 КАК Организация1С,
		|	Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 КАК Контрагент1С,
		|	Диадок_НастройкиКонтрагентов.Организация КАК Организация,
		|	Диадок_НастройкиКонтрагентов.Контрагент КАК Контрагент,
		|	Диадок_НастройкиКонтрагентов.Организация.ID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID,
		|	Диадок_НастройкиКонтрагентов.Организация.ID_ОсновноеПодразделение КАК ПодразделениеОрганизацииID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID_ОсновноеПодразделение КАК ПодразделениеКонтрагентаID
		|ПОМЕСТИТЬ КэшКонтрагентов
		|ИЗ
		|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
		|ГДЕ
		|	Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""
		|	И Диадок_НастройкиКонтрагентов.Значение = ""IsMyCounteragent""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Документ,
		|	СчетФактураВыданный.Номер КАК НомерДокумента,
		|	СчетФактураВыданный.Дата КАК ДатаДокумента,
		|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
		|	Диадок_ПакетыДокументов.Ссылка КАК Пакет
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшКонтрагентов КАК КэшКонтрагентов
		|		ПО (КэшКонтрагентов.Контрагент1С = СчетФактураВыданный.ДокументОснование.Контрагент)
		|			И (КэшКонтрагентов.Организация1С = СчетФактураВыданный.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
		|		ПО СчетФактураВыданный.Ссылка = Диадок_ПакетыДокументов.Документ
		|ГДЕ
		|	СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СчетФактураВыданный.Проведен
		|	И Диадок_ПакетыДокументов.Ссылка ЕСТЬ NULL";
		
	Иначе
		
		//ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.ID;	
		Сообщить("Неизвестный ID пакета: " + ВидПакетаРазвернутый.ID);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьПакет(ВидПакетаРазвернутый, СтрокаСписка, Пакет)
	
	Если ВидПакетаРазвернутый.ID = "ID_ОсновнойПакет" Тогда
		
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СтрокаСписка.Документ, "ID_УПД_СЧФ");
		
	Иначе
		
		ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.Наименование;	
		
	КонецЕсли;
	
КонецФункции

//Определение используемых пакетов
Функция ПолучитьТаблицуИспользуемыхПакетов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_ОсновнойПакет",	"Основной пакет");
	
	Возврат ТЗ;
	
КонецФункции

//Определение используемых видов документов, включаемых в пакеты
Функция ПолучитьТаблицуИспользуемыхВидовДокументов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ТипДокумента");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_УПД_СЧФ", 	"УПД СЧФ", 		"UniversalTransferDocument");
	//ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_УПД_ДОП", 	"УПД (ДОП)", 		"UniversalTransferDocument");

	Возврат ТЗ;
	
КонецФункции

//} СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ

//{ Вспомогательные методы

Функция НовыйМассив(элемент1)
	
	результат = Новый Массив;
	результат.Добавить(элемент1);
	
	Возврат результат;
	
КонецФункции

Функция ПерваяСтрокаТЗ(тз)
	
	Если тз.Количество() = 0 Тогда
		
		ВызватьИсключение "таблица значений должна содержать хотябы одну строку";
		
	КонецЕсли;
	
	Возврат тз[0];	
		
КонецФункции

//}

//**************************************
//{	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти

Процедура Заполнить_AcceptanceCertificateBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Complaints",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "VAT",						Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateItem.html

	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Description",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Title",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AcceptanceCertificateItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AcceptanceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceContent.html



КонецПроцедуры

Процедура Заполнить_AdditionalInfoId(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoId.html

	УстановитьЗначениеXDTO(Контент, "InfoFileId",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AdditionalInfoItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoItem.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_AddressInfo(Контент,Параметры)
	
	Объект = Параметры.Объект;
	ТипАдреса = Параметры.ТипАдреса;
	КонтактнаяИнформация = ПолучитьКонтактнуюИнформациюАдреса(ОбщегоНазначенияУТ.ПолучитьЛицо(Объект), ТипАдреса);
	
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ?(ПустаяСтрока(КонтактнаяИнформация.Поле1), Неопределено, СокрЛП(КонтактнаяИнформация.Поле1));
	
	УстановитьЗначениеXDTO(Контент, "IsForeign",				Ложь);
	УстановитьЗначениеXDTO(Контент, "ZipCode",					Индекс);
	УстановитьЗначениеXDTO(Контент, "RegionCode",				КодРегиона(КонтактнаяИнформация.Поле2));
	УстановитьЗначениеXDTO(Контент, "Territory",				КонтактнаяИнформация.Поле3);
	УстановитьЗначениеXDTO(Контент, "City",						КонтактнаяИнформация.Поле4);
	УстановитьЗначениеXDTO(Контент, "Locality",					КонтактнаяИнформация.Поле5);
	УстановитьЗначениеXDTO(Контент, "Street",					КонтактнаяИнформация.Поле6);
	УстановитьЗначениеXDTO(Контент, "Building",					КонтактнаяИнформация.Поле7);
	УстановитьЗначениеXDTO(Контент, "Block",					КонтактнаяИнформация.Поле8);
	УстановитьЗначениеXDTO(Контент, "Apartment",				КонтактнаяИнформация.Поле9);
	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AddressText",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AddressCode",				Неопределено);
	
КонецПроцедуры

Функция КодРегиона(Знач НаименованиеРегиона)
	
	НаименованиеРегиона= НРег(НаименованиеРегиона);
	КодРегиона= "";
	
	Если 	  Найти(НаименованиеРегиона, "адыгея") > 0 Тогда 
		КодРегиона= "01"
	ИначеЕсли Найти(НаименованиеРегиона, "башкортостан") > 0 Тогда 
		КодРегиона= "02"
	ИначеЕсли Найти(НаименованиеРегиона, "алтайский") > 0 Тогда 
		КодРегиона= "22" 
	ИначеЕсли Найти(НаименованиеРегиона, "алтай") > 0 Тогда 
		КодРегиона= "04"
	ИначеЕсли Найти(НаименованиеРегиона, "ингушетия") > 0 Тогда 
		КодРегиона= "06"
	ИначеЕсли Найти(НаименованиеРегиона, "кабардино") > 0 Тогда 
		КодРегиона= "07"
	ИначеЕсли Найти(НаименованиеРегиона, "карачаево") > 0 Тогда 
		КодРегиона= "09"
	ИначеЕсли Найти(НаименованиеРегиона, "карелия") > 0 Тогда 
		КодРегиона= "10"
	ИначеЕсли Найти(НаименованиеРегиона, "коми") > 0 Тогда 
		КодРегиона= "11"
	ИначеЕсли Найти(НаименованиеРегиона, "марий") > 0 Тогда 
		КодРегиона= "12" 
	ИначеЕсли Найти(НаименованиеРегиона, "мордовия") > 0 Тогда 
		КодРегиона= "13" 
	ИначеЕсли Найти(НаименованиеРегиона, "татарстан") > 0 Тогда 
		КодРегиона= "16" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "удмуртская") > 0 Тогда 
		КодРегиона= "18" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "хакасия") > 0 Тогда 
		КодРегиона= "19" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашская") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашия") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "краснодарский") > 0 Тогда 
		КодРегиона= "23" 
	ИначеЕсли Найти(НаименованиеРегиона, "приморский") > 0 Тогда 
		КодРегиона= "25" 
	ИначеЕсли Найти(НаименованиеРегиона, "ставропольский") > 0 Тогда 
		КодРегиона= "26" 
	ИначеЕсли Найти(НаименованиеРегиона, "хабаровский") > 0 Тогда 
		КодРегиона= "27" 
	ИначеЕсли Найти(НаименованиеРегиона, "амурская") > 0 Тогда 
		КодРегиона= "28" 
	ИначеЕсли Найти(НаименованиеРегиона, "архангельская") > 0 Тогда 
		КодРегиона= "29" 
	ИначеЕсли Найти(НаименованиеРегиона, "астраханская") > 0 Тогда 
		КодРегиона= "30" 
	ИначеЕсли Найти(НаименованиеРегиона, "белгородская") > 0 Тогда 
		КодРегиона= "31" 
	ИначеЕсли Найти(НаименованиеРегиона, "брянская") > 0 Тогда 
		КодРегиона= "32"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "владимирская") > 0 Тогда 
		КодРегиона= "33"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "волгоградская") > 0 Тогда 
		КодРегиона= "34" 
	ИначеЕсли Найти(НаименованиеРегиона, "вологодская") > 0 Тогда 
		КодРегиона= "35" 
	ИначеЕсли Найти(НаименованиеРегиона, "воронежская") > 0 Тогда 
		КодРегиона= "36" 
	ИначеЕсли Найти(НаименованиеРегиона, "ивановская") > 0 Тогда 
		КодРегиона= "37" 
	ИначеЕсли Найти(НаименованиеРегиона, "иркутская") > 0 Тогда 
		КодРегиона= "38" 
	ИначеЕсли Найти(НаименованиеРегиона, "калининградская") > 0 Тогда 
		КодРегиона= "39" 
	ИначеЕсли Найти(НаименованиеРегиона, "калужская") > 0 Тогда 
		КодРегиона= "40" 
	ИначеЕсли Найти(НаименованиеРегиона, "камчатский") > 0 Тогда 
		КодРегиона= "41" 
	ИначеЕсли Найти(НаименованиеРегиона, "кемеровская") > 0 Тогда 
		КодРегиона= "42" 
	ИначеЕсли Найти(НаименованиеРегиона, "кировская") > 0 Тогда 
		КодРегиона= "43" 
	ИначеЕсли Найти(НаименованиеРегиона, "костромская") > 0 Тогда 
		КодРегиона= "44" 
	ИначеЕсли Найти(НаименованиеРегиона, "курганская") > 0 Тогда 
		КодРегиона= "45"   
	ИначеЕсли Найти(НаименованиеРегиона, "курская") > 0 Тогда 
		КодРегиона= "46" 		
	ИначеЕсли Найти(НаименованиеРегиона, "ленинградская") > 0 Тогда 
		КодРегиона= "47" 
	ИначеЕсли Найти(НаименованиеРегиона, "липецкая") > 0 Тогда 
		КодРегиона= "48" 
	ИначеЕсли Найти(НаименованиеРегиона, "магаданская") > 0 Тогда 
		КодРегиона= "49" 
	ИначеЕсли Найти(НаименованиеРегиона, "московская") > 0 Тогда 
		КодРегиона= "50"
	ИначеЕсли Найти(НаименованиеРегиона, "мурманская") > 0 Тогда 
		КодРегиона= "51"
	ИначеЕсли Найти(НаименованиеРегиона, "нижегородская") > 0 Тогда 
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "новосибирская") > 0 Тогда 
		КодРегиона= "54"
	ИначеЕсли Найти(НаименованиеРегиона, "томская") > 0 Тогда 
		КодРегиона= "70"
	ИначеЕсли Найти(НаименованиеРегиона, "омская") > 0 Тогда 
		КодРегиона= "55"
	ИначеЕсли Найти(НаименованиеРегиона, "оренбургская") > 0 Тогда 
		КодРегиона= "56"
	ИначеЕсли Найти(НаименованиеРегиона, "орловская") > 0 Тогда 
		КодРегиона= "57"
	ИначеЕсли Найти(НаименованиеРегиона, "пензенская") > 0 Тогда 
		КодРегиона= "58"
	ИначеЕсли Найти(НаименованиеРегиона, "пермский") > 0 Тогда 
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "псковская") > 0 Тогда 
		КодРегиона= "60"
	ИначеЕсли Найти(НаименованиеРегиона, "ростовская") > 0 Тогда 
		КодРегиона= "61"
	ИначеЕсли Найти(НаименованиеРегиона, "рязанская") > 0 Тогда 
		КодРегиона= "62"
	ИначеЕсли Найти(НаименованиеРегиона, "самарская") > 0 Тогда 
		КодРегиона= "63"
	ИначеЕсли Найти(НаименованиеРегиона, "саратовская") > 0 Тогда 
		КодРегиона= "64"
	ИначеЕсли Найти(НаименованиеРегиона, "сахалинская") > 0 Тогда 
		КодРегиона= "65"
	ИначеЕсли Найти(НаименованиеРегиона, "саха") > 0 Тогда 
		КодРегиона= "14" 
	ИначеЕсли Найти(НаименованиеРегиона, "якутия") > 0 Тогда 
		КодРегиона= "14"	
	ИначеЕсли Найти(НаименованиеРегиона, "смоленская") > 0 Тогда 
		КодРегиона= "67"
	ИначеЕсли Найти(НаименованиеРегиона, "тамбовская") > 0 Тогда 
		КодРегиона= "68"
	ИначеЕсли Найти(НаименованиеРегиона, "тверская") > 0 Тогда 
		КодРегиона= "69"
	ИначеЕсли Найти(НаименованиеРегиона, "тульская") > 0 Тогда 
		КодРегиона= "71"
	ИначеЕсли Найти(НаименованиеРегиона, "тюменская") > 0 Тогда 
		КодРегиона= "72"
	ИначеЕсли Найти(НаименованиеРегиона, "ульяновская") > 0 Тогда 
		КодРегиона= "73"
	ИначеЕсли Найти(НаименованиеРегиона, "челябинская") > 0 Тогда 
		КодРегиона= "74"
	ИначеЕсли Найти(НаименованиеРегиона, "забайкальский") > 0 Тогда 
		КодРегиона= "75"
	ИначеЕсли Найти(НаименованиеРегиона, "ярославская") > 0 Тогда 
		КодРегиона= "76"
	ИначеЕсли Найти(НаименованиеРегиона, "еврейская") > 0 Тогда 
		КодРегиона= "79"
	ИначеЕсли Найти(НаименованиеРегиона, "ненецкий") > 0 Тогда 
		КодРегиона= ?(Найти(НаименованиеРегиона, "ямало") > 0, "89", "83")
	ИначеЕсли Найти(НаименованиеРегиона, "мансийский") > 0 Тогда 
		КодРегиона= "86"
	ИначеЕсли Найти(НаименованиеРегиона, "чукотский") > 0 Тогда 
		КодРегиона= "87"
	ИначеЕсли Найти(НаименованиеРегиона, "чеченская") > 0 Тогда 
		КодРегиона= "20"
	ИначеЕсли Найти(НаименованиеРегиона, "свердловская") > 0 Тогда 
		КодРегиона= "66"
	ИначеЕсли Найти(НаименованиеРегиона, "новгородская") > 0 Тогда 
		КодРегиона= "53"
	ИначеЕсли Найти(НаименованиеРегиона, "горьковская") > 0 Тогда   //синоним нижегородской
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "бурятия") > 0 Тогда 
		КодРегиона= "03"
	ИначеЕсли Найти(НаименованиеРегиона, "пермская") > 0 Тогда     //Пермская обл - синоним Пермского края
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "красноярский") > 0 Тогда 
		КодРегиона= "24"
	ИначеЕсли Найти(НаименованиеРегиона, "северная осетия") > 0 Тогда 
		КодРегиона= "15"
	ИначеЕсли Найти(НаименованиеРегиона, "камчатская") > 0 Тогда //Камчатская обл - синоним Камчатского края
		КодРегиона= "41"                                                                                                  
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "читинская") > 0 Тогда   //Забайкальский край
		КодРегиона= "75"                                                                           
	ИначеЕсли Найти(НаименованиеРегиона, "москва") > 0 Тогда 
		КодРегиона= "77"
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "дагестан") > 0 Тогда 
		КодРегиона= "05"
	ИначеЕсли Найти(НаименованиеРегиона, "санкт-петербург") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "ленинград") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "крым") > 0 Тогда 
		КодРегиона= "91"
	ИначеЕсли Найти(НаименованиеРегиона, "севастополь") > 0 Тогда 
		КодРегиона= "92"
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции	

Функция ПолучитьКонтактнуюИнформациюАдреса(Объект, Знач ТипАдреса)
	
	ВидАдреса = УправлениеКонтактнойИнформациейПереопределяемый.ПолучитьВидАдресаПоТипу(Объект,ТипАдреса);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , ТипАдреса);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.*
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	| И КонтактнаяИнформация.Тип = &Тип
	| " + ?(ЗначениеЗаполнено(ВидАдреса), " И КонтактнаяИнформация.Вид = &Вид", "") + "
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Выборка;
	
КонецФункции

//Процедура Заполнить_AddressInfo(Контент.Seller.Address, Новый Структура("Тип, юрфизлицо", "ЮридическийАдрес", СведенияОПоставщике.Ссылка));
//		
//	//ЗаполнитьСтруктурированноеОписаниеАдреса(Контент, );
//	//
//	//Тип = Параметры.Тип;
//	//ВидАдреса = Параметры.ВидАдреса;
//	//ЮрФизЛицо = Параметры.ЮрФизЛицо;

//	//Запрос = Новый Запрос;
//	//
//	//Запрос.УстановитьПараметр("Объект", ЮрФизЛицо);
//	//Запрос.УстановитьПараметр("Тип"   , Тип);
//	//Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
//	//
//	//Запрос.Текст = "
//	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//	//|	КонтактнаяИнформация.*
//	//|ИЗ
//	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
//	//|ГДЕ
//	//|	КонтактнаяИнформация.Объект = &Объект
//	//| И КонтактнаяИнформация.Тип = &Тип
//	//| И КонтактнаяИнформация.Вид = &Вид
//	//|";
//	//
//	//Выборка = Запрос.Выполнить().Выбрать();
//	//Если Выборка.Следующий() Тогда

//	//	УстановитьЗначениеXDTO(Контент, "IsForeign",				?(Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица, Истина, Ложь));
//	//	УстановитьЗначениеXDTO(Контент, "ZipCode",					Выборка.Поле1);
//	//	УстановитьЗначениеXDTO(Контент, "RegionCode",				);
//	//	УстановитьЗначениеXDTO(Контент, "Territory",				Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "City",						Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "Locality",					Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "Street",					Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "Building",					Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "Block",					Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "Apartment",				Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "AddressText",				Неопределено);
//	//	УстановитьЗначениеXDTO(Контент, "AddressCode",				Неопределено);

//	//КонецЕсли;
//	
//	

//КонецПроцедуры

Процедура Заполнить_AmountsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AmountsDiff.html

	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Attorney(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Attorney.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerAdditionalInfo",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerOrganizationName",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "RecipientAdditionalInfo",	Неопределено);

	Заполнить_Official						(Контент.Issuer, Неопределено);
	Заполнить_Official						(Контент.Recipient, Неопределено);

КонецПроцедуры

Процедура Заполнить_BaseContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseContent.html

	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);


КонецПроцедуры

Процедура Заполнить_BaseDocumentName(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseDocumentName.html

	УстановитьЗначениеXDTO(Контент, "BaseDocumentDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_ContractContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ContractContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ContractType",				Неопределено);


КонецПроцедуры

Процедура Заполнить_CorrectionRequestContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CorrectionRequestContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_CustomDeclaration(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CustomDeclaration.html

	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DeclarationNumber",		Неопределено);


КонецПроцедуры

Процедура Заполнить_Employee(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Employee.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_EventContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/EventContent.html

	УстановитьЗначениеXDTO(Контент, "CostChangeInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDocDetails",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "NotificationDate",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CorrectionBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CorrectionBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_BaseDocumentName(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountDebit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountCredit",		Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SubtotalWithVatExcluded",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Subtotal",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemMark",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalProperty",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "VendorCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ToRelease",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountDebit",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountCredit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CustomDeclarations").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CustomDeclarations.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_CustomDeclaration(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedOrganizationInfo(Контент, Сведения)

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FnsParticipantId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpd",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Email",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CorrespondentAccount",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Department",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationOrPersonInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "IndividualEntityRegistrationCertificate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	//Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedSigner(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSigner.html

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CertificateThumbprint",	Неопределено);

	Заполнить_ExtendedSignerDetails			(Контент.SignerDetails, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedSignerDetails(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSignerDetails.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "RegistrationCertificate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Powers",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Status",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "PowersBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationPowersBase",	Неопределено);


КонецПроцедуры

Процедура Заполнить_FormalizedRejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/FormalizedRejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Shipper, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Consignee, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);
	Заполнить_InvoiceTotals					(Контент.Totals, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_PaymentDocument(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionDate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionNumber",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("OriginalInvoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.OriginalInvoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_OriginalInvoice(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionTable.html




	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceForCorrectionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceForCorrectionInfo.html

	УстановитьЗначениеXDTO(Контент, "InvoiceDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceNumber",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("InvoiceRevisions").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.InvoiceRevisions.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceRevisionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "CountriesOfOrigin",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "CustomsDeclarationNumbers",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItemFields(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItemFields.html

	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceRevisionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceRevisionInfo.html

	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTable.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalNet",					Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceTotals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotals.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTotalsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotalsDiff.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_NonformilizedContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/NonformilizedContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "NeedRecipientSignature",	Неопределено);


КонецПроцедуры

Процедура Заполнить_Official(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Official.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);


КонецПроцедуры

Процедура Заполнить_OrganizationInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OrganizationInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Fax",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	//Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_OriginalInvoice(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OriginalInvoice.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);


КонецПроцедуры

Процедура Заполнить_OtherIssuer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OtherIssuer.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationBase",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_PaymentDocument(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/PaymentDocument.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);


КонецПроцедуры

Процедура Заполнить_ProformaInvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ProformaInvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);


КонецПроцедуры

Процедура Заполнить_RejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/RejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Shipper(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Shipper.html

	УстановитьЗначениеXDTO(Контент, "SameAsSeller",				Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.OrganizationInfo, Неопределено);

КонецПроцедуры

Процедура Заполнить_ShipperOrConsigneeInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ShipperOrConsigneeInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "SameAsSellerOrBuyer",		Неопределено);

	//Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_Signer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Signer.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SoleProprietorRegistrationCertificate",Неопределено);


КонецПроцедуры

Процедура Заполнить_StructedAdditionalInfos(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/StructedAdditionalInfos.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12BuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12BuyerContent.html

	УстановитьЗначениеXDTO(Контент, "ShipmentReceiptDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Official						(Контент.Receiver, Неопределено);
	Заполнить_Official						(Контент.Accepter, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Commons(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Commons.html

	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSum",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantityInWords",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSumInWords",			Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12Item(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Item.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ProductCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Feature",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Sort",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Article",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelCapacity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ExternalCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12SellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12SellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundNumber",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperDepartment",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperOkdp",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AttachmentSheetsQuantity",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SupplyDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Shipper, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Consignee, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Torg12Item(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_Torg12Totals					(Контент.Totals, Неопределено);
	Заполнить_Torg12Commons					(Контент.Commons, Неопределено);
	Заполнить_Official						(Контент.SupplyAllowedBy, Неопределено);
	Заполнить_Official						(Контент.ChiefAccountant, Неопределено);
	Заполнить_Official						(Контент.SupplyPerformedBy, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Totals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Totals.html

	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferBase(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferBase.html

	УстановитьЗначениеXDTO(Контент, "DocumentName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentInfo",				Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferInfo.html

	УстановитьЗначениеXDTO(Контент, "OperationInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationType",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferTextInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingTransferDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingInfo",			Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.Carrier, Неопределено);
	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("TransferBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.TransferBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_TransferBase(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("Waybills").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Waybills.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Waybill(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UcdSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UcdSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Function",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Invoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Invoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceForCorrectionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_ExtendedOrganizationInfo		(Контент.Seller, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Buyer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_EventContent					(Контент.EventContent, Неопределено);
	Заполнить_InvoiceCorrectionTable		(Контент.InvoiceCorrectionTable, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);

КонецПроцедуры

Процедура Заполнить_UtdBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UtdBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AcceptanceDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfoId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);

	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UtdSellerContent(Контент,Параметры)

	// Записать известные свойств
	ДокументСсылка = Параметры.ДокументСсылка;
	UtdFunction = Параметры.Function;
	НаименованиеДокумента = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)";
	УстановитьЗначениеXDTO(Контент, "Function",					UtdFunction);
	УстановитьЗначениеXDTO(Контент, "Name",						НаименованиеДокумента);
	УстановитьЗначениеXDTO(Контент, "Currency",					"643");
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);
	
	//{ Сформировать данные по документу
	ДанныеДляПечати = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУПД(Новый Структура, НовыйМассив(ДокументСсылка));
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если НЕ ДанныеПечати.Следующий() Тогда
		ВызватьИсключение "Данные для печати не сформированы";
	КонецЕсли;
	ДанныеПечати.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеПечати.Номер) Тогда
		ВызватьИсключение "Не заполнен номер в данных для печати";
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
	//}
	
	ЗаполнитьРеквизитыШапкиУПД(Контент, СведенияОбОрганизации, СведенияОКонтрагенте, ДанныеПечати);
	
	//{  Заполнить данные по расчетно-платежным документам
	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Каждого строкаПлатежногоДокумента из ДокументСсылка.ПлатежноРасчетныеДокументы Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		УстановитьЗначениеXDTO(НовЭлемент, "Date",						строкаПлатежногоДокумента.ДатаПлатежноРасчетногоДокумента);
		УстановитьЗначениеXDTO(НовЭлемент, "Number",					строкаПлатежногоДокумента.НомерПлатежноРасчетногоДокумента);
	
	КонецЦикла;
	//}

	ЗаполнитьТоварнуюЧастьУПД(Контент, ВыборкаПоДокументам, ДанныеПечати, ДанныеДляПечати);
	
	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТоварнуюЧастьУПД(Контент, ВыборкаПоДокументам, ДанныеПечати, ДанныеДляПечати)
	
	Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
		ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
	Иначе
		ВыводитьКодНоменклатуры = Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
	ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати);  //03.08.16
	
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	КоличествоСтрок = СтрокаТовары.Количество();
	ТолькоСтавкаБезНДС = Истина;
	НомерСтроки = 0;
	
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаСНДС = 0;
	ИтогоСуммаНДС = 0;
	ИтогоКоличество = 0;
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
				ИЛИ (ДанныеПечати.Покупатель <> НЕОПРЕДЕЛЕНО
					И НачалоДня(СтрокаТовары.Дата) <> НачалоДня(ДанныеПечати.Дата)
					И СтрокаТовары.Дата <> '00010101') Тогда
					Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТипСтроки = Контент.InvoiceTable.Свойства().Получить("Items").Тип.Имя;
		НовЭлемент = Контент.InvoiceTable.Items.Добавить(НовыйКонтент(ТипСтроки));
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, НовЭлемент, Неопределено, , ВыводитьКодыТНВЭД);
		Иначе
			НомерСтроки = НомерСтроки + 1;
			ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, НовЭлемент, НомерСтроки, , ВыводитьКодыТНВЭД);
		КонецЕсли;
		
		ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СтрокаТовары.СуммаБезНДС;
		ИтогоСуммаСНДС = ИтогоСуммаСНДС + СтрокаТовары.СуммаСНДС;
		ИтогоСуммаНДС = ИтогоСуммаНДС + СтрокаТовары.СуммаНДС;
		ИтогоКоличество = ИтогоКоличество + СтрокаТовары.Количество;
		
	КонецЦикла;
	
	//{Заполнить подвал
	УстановитьЗначениеXDTO(Контент.InvoiceTable, "TotalWithVatExcluded", ИтогоСуммаБезНДС);
	УстановитьЗначениеXDTO(Контент.InvoiceTable, "Vat", ИтогоСуммаНДС);
	УстановитьЗначениеXDTO(Контент.InvoiceTable, "Total", ИтогоСуммаСНДС);
	//}

КонецПроцедуры

Функция ВыводитьКодыТНВЭД(ДанныеПечати)
	
	Возврат  
			ДанныеПечати.Дата >= УчетНДСУТ.ДатаНачалаДействия150ФЗ()
	        И НЕ ДанныеПечати.УчитыватьНДС
	
КонецФункции

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, Контент, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		// Область должна остаться незаполненной
	Иначе
		
		НаименованиеТовара = ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.НоменклатураНаименование,
		СтрокаТовары.ХарактеристикаНаименование,
		?(ВыводитьКодТНВД И ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД), НСтр("ru = 'Код ТНВЭД: '") + СтрокаТовары.КодТНВЭД, Неопределено),
		,
		,
		СтрокаТовары.ЭтоВозвратнаяТара) + ПрефиксИПостфикс.Постфикс;
		
		УстановитьЗначениеXDTO(Контент, "Product", НаименованиеТовара);
		
	    Если ВыводитьКодНоменклатуры Тогда
			УстановитьЗначениеXDTO(Контент, "VendorCode", СокрЛП(СтрокаТовары.НоменклатураКод));
		КонецЕсли;
		
		УстановитьЗначениеXDTO(Контент, "UnitCode", СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод));
		УстановитьЗначениеXDTO(Контент, "Quantity", СтрокаТовары.Количество);
		УстановитьЗначениеXDTO(Контент, "Price", СтрокаТовары.Цена);
		УстановитьЗначениеXDTO(Контент, "TaxRate", рцПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		УстановитьЗначениеXDTO(Контент, "SubtotalWithVatExcluded", СтрокаТовары.СуммаБезНДС);
		УстановитьЗначениеXDTO(Контент, "Vat", СтрокаТовары.СуммаНДС);
		УстановитьЗначениеXDTO(Контент, "Subtotal", СтрокаТовары.СуммаСНДС);
		
		Если НЕ ПустаяСтрока(СтрокаТовары.НомерГТД) Тогда
			ТипСтроки = Контент.Свойства().Получить("CustomDeclarations").Тип.Имя;
			НовЭлемент = Контент.CustomDeclarations.Добавить(НовыйКонтент(ТипСтроки));
			УстановитьЗначениеXDTO(НовЭлемент, "CountryCode", СтрокаТовары.СтранаПроисхождения.Код);
			УстановитьЗначениеXDTO(НовЭлемент, "DeclarationNumber", СтрокаТовары.НомерГТД);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ДополнитьExtendedOrganizationInfoПоИНН(Контент, КПП)
	
	Если СтрДлина(Контент.inn) = 12 Тогда
		УстановитьЗначениеXDTO(Контент, "Type", "IndividualEntity");
	Иначе
		УстановитьЗначениеXDTO(Контент, "Type", "LegalEntity");
		УстановитьЗначениеXDTO(Контент, "Kpp", КПП);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиУПД(Контент, СведенияОПоставщике, СведенияОПокупателе, ДанныеПечати)
	
	НовОрг = Константы.НоваяОрганизация.Получить();  // 12.01.2016/ Завести новый реквизит в спр. Организации для печати подмены.
	
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,
		ДанныеПечати.Дата);
	
	Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Ложь, Ложь);
	Если Лев(Номер, 1) = "И" Тогда
		Номер = Прав(Номер, СтрДлина(Номер)-1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПечати.ИндексПодразделения) Тогда
		Номер = Номер + "/" + ДанныеПечати.ИндексПодразделения;
	КонецЕсли;
	
	УстановитьЗначениеXDTO(Контент, "Date",						ДанныеПечати.Дата);
	УстановитьЗначениеXDTO(Контент, "Number",					Номер);
	УстановитьЗначениеXDTO(Контент, "Currency",					ДанныеПечати.Валюта.Код);	
	
	// Seller
	УстановитьЗначениеXDTO(Контент.Seller, "Name",				СведенияОПоставщике.ОфициальноеНаименование);	
	Заполнить_AddressInfo(Контент.Seller.Address, Новый Структура("Объект, ТипАдреса", ДанныеПечати.Организация, "Юридический"));
	
	Если ДанныеПечати.Грузоотправитель.РезервыОрганизации = НовОрг Тогда       //ШитовО 02,07,15 Вместо КПП - КПП_Поставщика
		КПП = ДанныеПечати.Грузоотправитель.КПППоставщика; 
	Иначе		
		Если ДанныеПечати.ВыводитьКППГрузоотправителя Тогда
			КПП = СведенияОГрузоотправителе.КПП;
		Иначе
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначениеXDTO(Контент.Seller, "Inn", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь));	
	ДополнитьExtendedOrganizationInfoПоИНН(Контент.Seller, КПП);
	
	//Shipper 
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
	ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель И Не ДанныеПечати.Организация.РезервыОрганизации = НовОрг //ШитовО 04,12,2014 
		Тогда
		
		УстановитьЗначениеXDTO(Контент.Shipper, "SameAsSeller", Истина);	
	Иначе
		УстановитьЗначениеXDTO(Контент.Shipper.OrganizationInfo, "Name", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование"));
		Заполнить_AddressInfo(Контент.Shipper.OrganizationInfo.Address, Новый Структура("Объект, ТипАдреса", ДанныеПечати.Грузоотправитель, "Фактический"));
	КонецЕсли;
	
	//Buyer
	УстановитьЗначениеXDTO(Контент.Buyer, "Name", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));	
	Заполнить_AddressInfo(Контент.Buyer.Address, Новый Структура("Объект, ТипАдреса", ДанныеПечати.Контрагент, "Юридический"));
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	УстановитьЗначениеXDTO(Контент.Buyer, "Inn", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь));	
	ДополнитьExtendedOrganizationInfoПоИНН(Контент.Buyer, КПП);
	
	//Consignee
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузополучатель = Неопределено Тогда
	Иначе
		УстановитьЗначениеXDTO(Контент.Consignee, "Name", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование", Ложь));	
		УстановитьЗначениеXDTO(Контент.Consignee, "Inn", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ИНН", Ложь));	
		КППГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП", Ложь);
		Если НЕ ПустаяСтрока(КППГрузополучателя) Тогда
			УстановитьЗначениеXDTO(Контент.Consignee, "Kpp", КППГрузополучателя);	
		КонецЕсли;
		
		Заполнить_AddressInfo(Контент.Consignee.Address, Новый Структура("Объект, ТипАдреса", ДанныеПечати.Грузополучатель, "Фактический"));
	КонецЕсли;
	
	Если не ПустаяСтрока(Контент.Seller.Kpp) Тогда
		стрКПП = "/КПП";
		стрЗначениеКПП = "/" + Контент.Seller.Kpp;
	КонецЕсли;
	УстановитьЗначениеXDTO(Контент, "Creator", Контент.Seller.Name + ", ИНН" + стрКпп + " " + Контент.Seller.Inn + стрЗначениеКПП);	
	
КонецПроцедуры

Процедура Заполнить_Waybill(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Waybill.html

	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);


КонецПроцедуры
//#Область ПодключаемыйМодуль_КонецПримера

//}	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти
